// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	porter "rozhok/features/porter"

	mock "github.com/stretchr/testify/mock"
)

// PorterRepo is an autogenerated mock type for the DataInterface type
type PorterRepo struct {
	mock.Mock
}

// DeletePorter provides a mock function with given fields: id
func (_m *PorterRepo) DeletePorter(id uint) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *PorterRepo) Get(id uint) (porter.Core, error) {
	ret := _m.Called(id)

	var r0 porter.Core
	if rf, ok := ret.Get(0).(func(uint) porter.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(porter.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *PorterRepo) GetAll() ([]porter.Core, error) {
	ret := _m.Called()

	var r0 []porter.Core
	if rf, ok := ret.Get(0).(func() []porter.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]porter.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendapatan provides a mock function with given fields: _a0
func (_m *PorterRepo) GetPendapatan(_a0 porter.Core) (porter.Core, error) {
	ret := _m.Called(_a0)

	var r0 porter.Core
	if rf, ok := ret.Get(0).(func(porter.Core) porter.Core); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(porter.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(porter.Core) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPorter provides a mock function with given fields: _a0
func (_m *PorterRepo) InsertPorter(_a0 porter.Core) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(porter.Core) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(porter.Core) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePorter provides a mock function with given fields: _a0, id
func (_m *PorterRepo) UpdatePorter(_a0 porter.Core, id uint) (int, error) {
	ret := _m.Called(_a0, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(porter.Core, uint) int); ok {
		r0 = rf(_a0, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(porter.Core, uint) error); ok {
		r1 = rf(_a0, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPorterRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewPorterRepo creates a new instance of PorterRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPorterRepo(t mockConstructorTestingTNewPorterRepo) *PorterRepo {
	mock := &PorterRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
