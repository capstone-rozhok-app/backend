// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	transaksiclient "rozhok/features/transaksi_client"

	mock "github.com/stretchr/testify/mock"
)

// TransaksiClient is an autogenerated mock type for the TransaksiClientData type
type TransaksiClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: TransaksiClient
func (_m *TransaksiClient) Get(TransaksiClient transaksiclient.Core) (transaksiclient.Core, error) {
	ret := _m.Called(TransaksiClient)

	var r0 transaksiclient.Core
	if rf, ok := ret.Get(0).(func(transaksiclient.Core) transaksiclient.Core); ok {
		r0 = rf(TransaksiClient)
	} else {
		r0 = ret.Get(0).(transaksiclient.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transaksiclient.Core) error); ok {
		r1 = rf(TransaksiClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: TransaksiClient
func (_m *TransaksiClient) GetAll(TransaksiClient transaksiclient.Core) ([]transaksiclient.Core, error) {
	ret := _m.Called(TransaksiClient)

	var r0 []transaksiclient.Core
	if rf, ok := ret.Get(0).(func(transaksiclient.Core) []transaksiclient.Core); ok {
		r0 = rf(TransaksiClient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaksiclient.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transaksiclient.Core) error); ok {
		r1 = rf(TransaksiClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: TransaksiClient
func (_m *TransaksiClient) Insert(TransaksiClient transaksiclient.Core) (int, error) {
	ret := _m.Called(TransaksiClient)

	var r0 int
	if rf, ok := ret.Get(0).(func(transaksiclient.Core) int); ok {
		r0 = rf(TransaksiClient)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transaksiclient.Core) error); ok {
		r1 = rf(TransaksiClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: TransaksiClient
func (_m *TransaksiClient) Update(TransaksiClient transaksiclient.Core) (int, error) {
	ret := _m.Called(TransaksiClient)

	var r0 int
	if rf, ok := ret.Get(0).(func(transaksiclient.Core) int); ok {
		r0 = rf(TransaksiClient)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(transaksiclient.Core) error); ok {
		r1 = rf(TransaksiClient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransaksiClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransaksiClient creates a new instance of TransaksiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransaksiClient(t mockConstructorTestingTNewTransaksiClient) *TransaksiClient {
	mock := &TransaksiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
